- @page_title = application_name + " #{@instantiation.instantiation_identifier}"
-content_for :head do
  =stylesheet_link_tag 'forms'
  =javascript_include_tag 'edit_recording_instantiation'
  :javascript
    $(document).ready(function() {
    });
    
.title-line
  #title-container
    %h1#title-text
      Recording Instantiation:
      =@instantiation.instantiation_identifier
    .top_info
    %span.label
      Instantiation of:
    -if @recording 
      =link_to @recording.document_identifier, recording_path(@recording)
      - unless @recording.originally_recorded_by.empty?
        .top_info
          %span.label
            Recorded by:
            = @recording.originally_recorded_by
    -else
      (No recording document found)
    %span.label
      This is a recording of:
    -if @talk 
      =link_to @talk.english_title, talk_path(@talk)
    -else
      (No talk found)  

.file-content
  = @instantiation.uploaded.path
  .player
    - if @instantiation.uploaded.present? 
      %audio{:controls=>"controls"}
        %source{:src=>@instantiation.uploaded.expiring_url(180.minutes)}
      =#link_to "download the recording", @instantiation.s3_url
  %div.upload
    %h2 Upload
    =#render :partial=>"uploader"

=form_for @instantiation, :html => { :multipart => true } do |f|

  %ul.form-fields
    %li 
      =f.label "uploaded", 'File'
      #wrapper
        =raw s3_swf_upload_tag( :fileTypes => '*.mp3;*.wav;*.ogg;*.flac;*.aac;*.mp4;*.wmv;*.mov;*.caf',
          :fileTypeDescs => 'Audio files.',
          :keyPrefix=>'temp/',
          :onFileNotInQueue => "alert('File not found in the queue');",
          :onFileSizeLimitReached => "alert('That file is too big');",
          :onQueueChange => "queueChangeHandler(queue);",
          :onQueueSizeLimitReached => "alert('There are too many files in the queue');",
          :onQueueEmpty => "alert('You gotta have at least one file in there');",
          :onQueueClear => "queueClearHandler(queue);",
          :onUploadingStart => "uploadingStartHandler();",
          :onUploadingFinish => "uploadingFinishHandler();",
          :onSignatureIOError => "alert('There was an error');",
          :onSignatureXMLError => "alert('There was an error');",
          :onSignatureSecurityError => "alert('There was an error');",
          :onUploadError => "alert('There was an error');",
          :onUploadIOError => "alert('There was an error');",
          :onUploadSecurityError => "alert('There was an error');",
          :onUploadProgress => "progressHandler(progress_event);",
          :onUploadComplete => "uploadCompleteHandler(upload_options,event);" )
        =submit_tag "Start Uploading", :id=>'StartButton', :onclick=>"s3_swf_1_object.startUploading(); return false" 
        #file_lists
          %ul#file_done_list.file_list
          %ul#file_todo_list.file_list



    %li
      =f.label 'instantiation_identifier', 'File Name', :class=>'left-col'
      =f.text_field 'instantiation_identifier', :class=>"extra_long"
    %li
      =f.label 'iana_format', 'Digital Format', :class=>'left-col'
      =f.select 'iana_format', Marpa::MarpaCore.iana_mime_types.invert.sort
    %li
      =f.label 'workflow_status', 'Workflow Status', :class=>'left-col'
      =f.select 'workflow_status', RecordingInstantiation.workflow_statuses
    %li
      =f.label 'location', 'Location', :class=>'left-col'
      =f.text_field 'location', :class=>"extra_long"      
    %li
      =f.label 'file_size_mb', 'File Size (MB)', :class=>'left-col'
      =f.text_field 'file_size_mb'
    %li
      =f.label 'duration', 'Duration', :class=>'left-col'
      =f.text_field 'duration'
    %li
      =f.label 'informal_note', 'Notes', :class=>'left-col'
      =f.text_area 'informal_note', :class=>"fullsize"
    %li
      =f.label 'technical_note', 'Technical Notes', :class=>'left-col'
      =f.text_area 'technical_note', :class=>"fullsize"
  =f.submit 'Save instatiation'
  =hidden_field_tag 'recording', params[:recording]
